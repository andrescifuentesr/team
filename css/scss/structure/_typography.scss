//URL ........... http://typeplate.com
// VERSION ....... 1.1.2
// Github ........ https://github.com/typeplate/typeplate.github.io
// AUTHORS ....... Dennis Gaebel (@gryghostvisuals) & Zachary Kain (@zakkain)
// LICENSE ....... Creative Commmons Attribution 3.0
// LICENSE URL ... http://creativecommons.org/licenses/by/3.0


// $B a s e  T y p e
// --------------------------------------------------------------------------


//the serif boolean var can be redeclared from another stylesheet. However
//the var must be placed after your @import "typeplate.scss";
$serif-boolean: true !default;

$font-family: if($serif-boolean, serif, sans-serif) !default; // Non-font-face font-stack

$font-weight: normal !default;
$line-height: 1.65 !default;
$font-size: 112.5 !default; // percentage value (16 * 112.5% = 18px)
$font-base: 16 * ($font-size/100) !default; // converts our percentage to a pixel value
$custom-font-family: false !default; // Custom font-face stack, if set will be added to the $font-family

$font-family: Georgia, Times, "Times New Roman", serif; // Non-font-face font-stack
$custom-font-family: ralewayregular, arial, sans-serif; // Custom font-face stack, if set will be added to the $font-family



// $W o r d    W r a p
// --------------------------------------------------------------------------
// Silent Sass Classes - A.K.A Placeholders
//
// normal: Indicates that lines may only break at normal word break points.
// break-word : Indicates that normally unbreakable words may be broken at
// arbitrary points if there are no otherwise acceptable break points in the line.

%breakword {
	word-wrap: break-word;
}

%normal-wrap {
	word-wrap: normal;
}

%inherit-wrap {
	word-wrap: auto;
}



//paragraph siblings indent
// --------------------------------------------------------------------------

$indent-val: 1em;

p {
	margin: 0 0 $indent-val;
	& + p {
		//text-indent: $indent-val;
		//margin-top: -$indent-val;
	}
}


// $H y p h e n
// --------------------------------------------------------------------------
//http://trentwalton.com/2011/09/07/css-hyphenation

@mixin css-hyphens($val) {
	// Accepted values: [ none | manual | auto ]
	-webkit-hyphens: $val;	// Safari 5.1 thru 6, iOS 4.2 thru 6
	-moz-hyphens: $val;		// Firefox 16 thru 20
	-ms-hyphens: $val;		// IE10
	-o-hyphens: $val;		// PRESTO...haha LOL
	hyphens: $val;			// W3C standard
}

abbr,
acronym,
blockquote,
code,
dir,
kbd,
listing,
plaintext,
q,
samp,
tt,
var,
xmp {
	// http://meyerweb.com/eric/thoughts/2012/12/17/where-to-avoid-css-hyphenation
	@include css-hyphens(none);
}


// $Variable $DropCap
// -------------------------------------//

$dropcap-float-position: left !default;
$dropcap-font-size: 4em !default;
$dropcap-font-family: inherit !default;
$dropcap-txt-indent: 0 !default;
$dropcap-margin: inherit !default;
$dropcap-padding: inherit !default;
$dropcap-color: inherit !default;
$dropcap-line-height: 1 !default;
$dropcap-bg: transparent !default;

// $Mixin $Dropcaps
// -------------------------------------//
/**
 * Dropcap Sass @include
 * Use the following Sass @include with any selector you feel necessary.
 *
	@include dropcap($dropcap-float-position, $dropcap-font-size, $dropcap-font-family, $dropcap-txt-indent, $dropcap-margin, $dropcap-padding, $dropcap-color, $dropcap-line-height, $dropcap-bg);
 *
 * Extend this object into your custom stylesheet. Let the variables do the work.
 *
 */

// Use @include dropcap($dropcap-float-position, $dropcap-font-size, $dropcap-font-family, $dropcap-txt-indent, $dropcap-margin, $dropcap-padding, $dropcap-color, $dropcap-line-height, $dropcap-bg);
// to pass the following arguments below. Feel free to pass in custom
// values for the variables we've provided.
//
// Make sure you add the class “drop-cap” to your markup in order to operate.
@mixin dropcap($dropcap-float-position, $dropcap-font-size, $dropcap-font-family, $dropcap-txt-indent, $dropcap-margin, $dropcap-padding, $dropcap-color, $dropcap-line-height, $dropcap-bg) {
	&:first-letter {
		float: $dropcap-float-position;
		margin: $dropcap-margin;
		padding: $dropcap-padding;
		font-size: $dropcap-font-size;
		font-family: $dropcap-font-family;
		line-height: $dropcap-line-height;
		text-indent: $dropcap-txt-indent;
		background: $dropcap-bg;
		color: $dropcap-color;
	}
}

// Including the @mixin with our .drop-cap class purely for demo purposes.
// Not included in the actual Typeplate Sass or CSS download.
//.drop-cap {
//	@include dropcap($margin: 0 .5em auto 0, $padding: .5em, $color: #fff, $bg: #333);
//}


$measure: $font-base * $line-height;

// $T y p e  S c a l e
// --------------------------------------------------------------------------

$tera: 117;		//	117	= 18 × 6.5
$giga: 90;		//	90  = 18 × 5
$mega: 72;		//	72  = 18 × 4
$alpha: 60;		//	60  = 18 × 3.3333
$beta: 48;		//	48  = 18 × 2.6667
$gamma: 36;		//	36  = 18 × 2
$delta: 24;		//	24  = 18 × 1.3333
$epsilon: 21;	//	21  = 18 × 1.1667
$zeta: 18; 		//	18  = 18 × 1

// typscale unit
$type-scale-unit-value: rem;

// typographic scale
@mixin modular-scale($scale, $base, $value, $measure:"") {
	font-size: $scale#{px};
	font-size: modular-scale($scale, $base, $value);
	@if $measure != "" {
		margin-bottom: measure-margin($scale, $measure, $value);
	}
}

// modular scale function to return em equivalent
@function modular-scale($scale, $base, $value) {
	// divide a given font-size by base font-size & return a relative em value
	@return ($scale/$base)#{$value};
}

// divide 1 unit of measure by given font-size & return a relative em value
@function measure-margin($scale, $measure, $value) {
	@return ($measure/$scale)#{$value};
}

// styles for all headings, in the style of @csswizardry
%hN {
	// voodoo to enable ligatures and kerning
	text-rendering: optimizeLegibility;
	// this fixes huge spaces when a heading wraps onto two lines
	line-height: 1;
	margin-top: 0;
}

// make a multi-dimensional array, where:
// the first value is the name of the class
// and the second value is the variable for the size
$sizes: tera $tera, giga $giga, mega $mega, alpha $alpha, beta $beta, gamma $gamma, delta $delta, epsilon $epsilon, zeta $zeta;

// associate h1-h6 tags with their appropriate greek heading
@each $size in $sizes {
	.#{nth($size, 1)} {
		@include modular-scale(nth($size, 2), $font-base, '#{$type-scale-unit-value}', $measure);
	}
}

// associate h1-h6 tags with their appropriate greek heading
// h1 {
// 	@extend .alpha;
// 	@extend %hN;
// }

h1 {
	@extend .gamma;
	@extend %hN;
}

h2 {
	@extend .delta;
	@extend %hN;
}

h3 {
	@extend .epsilon;
	@extend %hN;
}

h4 {
	@extend .epsilon;
	@extend %hN;
}

h5 {
	@extend .zeta;
	@extend %hN;
}

h6 {
	@extend .zeta;
	@extend %hN;
}